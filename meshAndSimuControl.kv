<BlackLabel@Label>
    text_size: (self.width, None) #sets the width to the width of the label itself (self.width) and leaves the height unrestricted (None). This is necessary for the halign and valign properties to take effect because it defines the bounding box within which the text will be aligned.
    halign: "left"
    color: (0, 0, 0, 1)  

<CustomizedSpinnerOption@SpinnerOption>
    height: 30
    # background_normal: ""
    # background_color: utils.get_color_from_hex("#2B93C3")

<MeshAndSimuControlLayout>

    # Add below two lines to ensure that the scrollView which contains this meshAndSimuCOntrollayout works.
    size_hint_y: None
    height: self.minimum_height 

    cols: 4    
    row_force_default: True 
    row_default_height: 50
    col_force_default: True 
    col_default_width: 260
    spacing: 10
    padding: 20

    # row 1: part_method
    BlackLabel:
        text: "part_method:"
    BoxLayout:
        orientation: "horizontal"    
        BlackLabel:
            text: "1"
            halign: "right"
        CheckBox:
            id: part_method-check_1    
            group: "part_method_group"    
            on_active: root.checkboxSelected(self, "part_method", "1") 
        BlackLabel:
            text: "2"
            halign: "right"
        CheckBox:
            id: part_method-check_2    
            group: "part_method_group"    
            on_active: root.checkboxSelected(self, "part_method", "2")    
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment

    # row 2: cmargin            
    BlackLabel: 
        text: "cmargin:"
    TextInput:
        id: cmargin-    
        text: ""    
        multiline: False 
        on_text: root.typeInsideTextInput("cmargin", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
    
    # row 3: vmargin
    BlackLabel:
        text: "vmargin:"
    TextInput:
        id: vmargin-    
        text: ""
        multiline: False
        on_text: root.typeInsideTextInput("vmargin", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
        
    # row 4:  mshift
    BlackLabel:
        text: "mshift:"
    TextInput:
        id: mshift-text_0    
        text: ""
        multiline: False
        on_text: root.typeInsideTextInput("mshift", self.text, seqLen = 3, idxOfCurrentTextIpt = 0)
    TextInput:
        id: mshift-text_1    
        text: ""
        multiline: False
        on_text: root.typeInsideTextInput("mshift", self.text, seqLen = 3, idxOfCurrentTextIpt = 1)
    TextInput:
        id: mshift-text_2    
        text: ""
        multiline: False
        on_text: root.typeInsideTextInput("mshift", self.text, seqLen = 3, idxOfCurrentTextIpt = 2)

    # row 5: mscale
    BlackLabel:
        text: "mscale:"
    TextInput:
        id: mscale-text_0    
        text: ""
        multiline: False
        on_text: root.typeInsideTextInput("mscale", self.text, seqLen = 3, idxOfCurrentTextIpt = 0)
    TextInput:
        id: mscale-text_1    
        text: ""
        multiline: False
        on_text: root.typeInsideTextInput("mscale", self.text, seqLen = 3, idxOfCurrentTextIpt = 1)
    TextInput:
        id: mscale-text_2    
        text: ""
        multiline: False
        on_text: root.typeInsideTextInput("mscale", self.text, seqLen = 3, idxOfCurrentTextIpt = 2)
    
    # row 6: multizone
    BlackLabel:
        text: "multizone:"
    BoxLayout:
        orientation: "horizontal"    
        BlackLabel:
            text: "on"
            halign: "right"
        CheckBox:
            id: multizone-check_on    
            group: "multizone"    
            on_active: root.checkboxSelected(self, "multizone", "on")  
        BlackLabel:
            text: "off"            
            halign: "right"
        CheckBox:
            id: multizone-check_off    
            group: "multizone"
            on_active: root.checkboxSelected(self, "multizone", "off")
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment

    # row 7: meshout_flag
    BlackLabel:
        text: "meshout_flag:"
    BoxLayout:
        orientation: "horizontal"
        BlackLabel:
            text: "1"
            halign: "right"
        CheckBox:
            id: meshout_flag-check_1    
            group: "meshout_flag"
            on_active: root.checkboxSelected(self, "meshout_flag", "1")
        BlackLabel:
            text: "2"
            halign: "right"
        CheckBox:
            id: meshout_flag-check_2    
            group: "meshout_flag"
            on_active: root: root.checkboxSelected(self, "meshout_flag", "2")           
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
        
    # row 8: Empty Row to seperate two entries
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
    
    # row 9: restart
    BlackLabel:
        text: "restart:"
    BoxLayout:
        orientation: "horizontal"
        BlackLabel:
            text: "on"
            halign: "right"
        CheckBox:
            id: restart-check_on    
            group: "restart"    
            on_active: root.checkboxSelected(self, "restart", "on")  
        BlackLabel:
            text: "off"            
            halign: "right"
        CheckBox:
            id: restart-check_off    
            group: "restart"
            on_active: root.checkboxSelected(self, "restart", "off")
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
    
    # row 10: testcase 
    BlackLabel:
        text: "testcase:"       
    Spinner:
        id: testcase-spinner
        text: ""
        values: ["0", "1", "2"]
        on_text: root.spinnerClicked("testcase", self.text)
        option_cls: "CustomizedSpinnerOption" # For customize the option outlook of the spinner layout 
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment

    # row 11: analytic
    BlackLabel:
        text: "analytic:"
    Spinner:
        id: analytic-spinner
        text: ""
        values: ["0", "1", "2", "3", "-1"]
        on_text: root.spinnerClicked("analytic", self.text)
        option_cls: "CustomizedSpinnerOption"
    
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment

    # row 12: steady    
    BlackLabel:
        text: "steady:"
    BoxLayout:
        orientation: "horizontal"
        BlackLabel:
            text: "on"
            halign: "right"
        CheckBox:
            id: steady-check_on    
            group: "steady"
            on_active: root.checkboxSelected(self, "steady", "on")
        BlackLabel:
            text: "off"
            halign: "right"
        CheckBox:
            id: steady-check_off    
            group: "steady"
            on_active: root.checkboxSelected(self, "steady", "off")       
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment

    # row 13: fixed_dt 
    BlackLabel:
        text: "fixed_dt:"
    BoxLayout:
        orientation: "horizontal"
        BlackLabel:
            text: "on"
            halign: "right"
        CheckBox:
            id: fixed_dt-check_on    
            group: "fixed_dt"
            on_active: root.checkboxSelected(self, "fixed_dt", "on")
        BlackLabel:
            text: "off"
            halign: "right"
        CheckBox:
            id: fixed_dt-check_off    
            group: "fixed_dt"
            on_active: root.checkboxSelected(self, "fixed_dt", "off")        
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment

    # row 14: dt
    BlackLabel:
        text: "dt:"
    TextInput:
        id: dt-    
        text: ""
        multiline: False        
        on_text: root.typeInsideTextInput("dt", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment

    # row 15: CFL_range
    BlackLabel:
        text: "CFL_range"
    TextInput:
        id: CFL_range-text_0    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("CFL_range", self.text, seqLen = 3, idxOfCurrentTextIpt = 0)
    TextInput:
        id: CFL_range-text_1    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("CFL_range", self.text, seqLen = 3, idxOfCurrentTextIpt = 1)
    TextInput:
        id: CFL_range-text_2    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("CFL_range", self.text, seqLen = 3, idxOfCurrentTextIpt = 2)
    
    # row 16: ntsout
    BlackLabel:
        text: "ntsout:"
    TextInput:
        id: ntsout-    
        text: ""
        multiline: False
        on_text: root.typeInsideTextInput("ntsout", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment

    # row 17: nts_max
    BlackLabel:
        text: "nts_max:"
    TextInput:
        id: nts_max-    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("nts_max", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment

    # row 18: steady_conv_order    
    BlackLabel:
        text: "steady_conv_order:"
    TextInput:
        id: steady_conv_order-    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("steady_conv_order", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment

    # row 19: steady_tol    
    BlackLabel:
        text: "steady_tol:"
    TextInput:
        id: steady_tol-    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("steady_tol", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment

    # row 20: steady_monitor 
    BlackLabel:
        text: "steady_monitor:"
    Spinner:
        id: steady_monitor-2version_text_0 
        text: ""
        values: ["0", "1", "2"]
        # on_text: root.spinnerClicked("steady_monitor", self.text)
        on_text: root.typeInsideTextInput("steady_monitor", self.text, seqLen=3, idxOfCurrentTextIpt=0)
        option_cls: "CustomizedSpinnerOption"
    TextInput:
        id: steady_monitor-2version_text_1    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("steady_monitor", self.text, seqLen=3, idxOfCurrentTextIpt=1)
    TextInput:
        id: steady_monitor-2version_text_2  
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("steady_monitor", self.text, seqLen=3, idxOfCurrentTextIpt=2)
        

    # row 21: tbeg 
    BlackLabel:
        text: "tbeg:"
    TextInput:
        id: tbeg-    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("tbeg", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
        
    # row 22: tend 
    BlackLabel:
        text: "tend:"
    TextInput:
        id: tend-    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("tend", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
        
    # row 23: niterno_max 
    BlackLabel:
        text: "niterno_max:"
    TextInput:
        id: niterno_max-    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("niterno_max", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
        
    # row 24: niter_conv_order 
    BlackLabel:
        text: "niter_conv_order:"
    TextInput:
        id: niter_conv_order-    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("niter_conv_order", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
        
    # row 25: niter_tol 
    BlackLabel:
        text: "niter_tol:"
    TextInput:
        id: niter_tol-    
        text: ""
        multiline: False    
        on_text: root.typeInsideTextInput("niter_tol", self.text)
    Label: # Empty position for row alignment
    Label: # Empty position for row alignment
                